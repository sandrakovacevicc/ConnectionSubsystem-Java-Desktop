/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import Domain.Object.entities.MolbaZaUrbanizam;
import Domain.Object.entities.NacinGrejanja;
import Domain.Object.entities.NamenaObjekta;
import Domain.Object.entities.Objekat;
import Domain.Object.entities.TipInstalacije;
import Domain.Object.entities.Ulica;
import Domain.Object.entities.VrstaPrikljucka;
import Domain.Object.entities.ZaposleniPogled;
import controller.Controller;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class ObjekatForm extends javax.swing.JFrame {

    List<Objekat> objekti = new LinkedList<Objekat>();
    List<Objekat> pronadjeniObjekti = new LinkedList<Objekat>();
    List<NacinGrejanja> grejanje = new LinkedList<NacinGrejanja>();
    List<NacinGrejanja> pronadjenaGrejanja = new LinkedList<NacinGrejanja>();
    List<VrstaPrikljucka> vrsteprikljucaka = new LinkedList<VrstaPrikljucka>();
    List<VrstaPrikljucka> pronadjeneVrstePrikljucka = new LinkedList<VrstaPrikljucka>();
    List<TipInstalacije> instalacije = new LinkedList<TipInstalacije>();
    List<TipInstalacije> pronadjeneInstalacije = new LinkedList<TipInstalacije>();
    List<NamenaObjekta> namenaObjekta = new LinkedList<NamenaObjekta>();
    List<NamenaObjekta> pronadjeneNameneObjekta = new LinkedList<NamenaObjekta>();
    List<ZaposleniPogled> zaposleni = new LinkedList<ZaposleniPogled>();
    List<ZaposleniPogled> pronadjeniZaposleni = new LinkedList<ZaposleniPogled>();
    List<Ulica> ulice = new LinkedList<Ulica>();
    List<Ulica> pronadjeneUlice = new LinkedList<Ulica>();
    List<MolbaZaUrbanizam> molbe = new LinkedList<MolbaZaUrbanizam>();
    List<MolbaZaUrbanizam> pronadjeneMolbe = new LinkedList<MolbaZaUrbanizam>();
        private HashMap<Integer, String[]> originalneVrednostiObjekta = new HashMap<>();

    
    public ObjekatForm() throws Exception {
        initComponents();
        setTitle("Objekat");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListenerObjekat();
        setUpTableListenerMolba();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel19 = new javax.swing.JLabel();
        cmbKoordinatorTehnike = new javax.swing.JComboBox<>();
        txtKatastarskaParcela = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        cmbPostanskiBr = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMolba = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtObjekatID = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDelovodniBr = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbObjekat = new javax.swing.JComboBox<>();
        txtUkupnaSnaga = new javax.swing.JTextField();
        btnSacuvajMolbu = new javax.swing.JButton();
        btnIzmeniMolbu = new javax.swing.JButton();
        txtDatum = new javax.swing.JTextField();
        btnObrisiMolbu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblObjekat = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtIDMolbe = new javax.swing.JTextField();
        cmbKontaktOsoba = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBrizLKRM = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        cmbUlica = new javax.swing.JComboBox<>();
        btnSacuvajObjekat = new javax.swing.JButton();
        btnIzmeniObjekat = new javax.swing.JButton();
        btnObrisiObjekat = new javax.swing.JButton();
        cmbNacinGrejanja = new javax.swing.JComboBox<>();
        cmbVrstaPrikljucka = new javax.swing.JComboBox<>();
        cmbInstalacija = new javax.swing.JComboBox<>();
        cmbNamenaObjekta = new javax.swing.JComboBox<>();
        cmbVrstaObjekta = new javax.swing.JComboBox<>();
        cmbPostanskiBrObjekat = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        cmbUlicaObjekat = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel19.setText("Koordinator tehnike");

        cmbKoordinatorTehnike.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel20.setText("Postanski broj");

        cmbPostanskiBr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "2" }));
        cmbPostanskiBr.setSelectedIndex(-1);

        jLabel8.setText("Molba za Urbanizam");

        tblMolba.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Molbe", "Datum", "Delovodni Broj", "Broj iz LKRM", "ID Objekta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMolba.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblMolba);

        jLabel1.setText("Objekat");

        jLabel2.setText("ID objekta");

        jLabel13.setText("Instalacija");

        jLabel3.setText("ID Molbe");

        jLabel14.setText("Ukupna snaga");

        jLabel4.setText("Datum");

        jLabel15.setText("Vrsta prikljucka");

        jLabel10.setText("Delovodni broj");

        jLabel12.setText("Objekat");

        jLabel16.setText("Vrsta objekta");

        cmbObjekat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtUkupnaSnaga.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtUkupnaSnaga.setEnabled(false);

        btnSacuvajMolbu.setText("Sacuvaj");
        btnSacuvajMolbu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajMolbuActionPerformed(evt);
            }
        });

        btnIzmeniMolbu.setText("Izmeni");
        btnIzmeniMolbu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniMolbuActionPerformed(evt);
            }
        });

        txtDatum.setText("dd-MM-yyyy");

        btnObrisiMolbu.setText("Obrisi");
        btnObrisiMolbu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiMolbuActionPerformed(evt);
            }
        });

        tblObjekat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Objekta", "Katastarska Parcela", "Vrsta Objekta", "Ukupna snaga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblObjekat);

        jLabel17.setText("Broj iz LKRM");

        jLabel18.setText("Kontakt osoba");

        cmbKontaktOsoba.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Katastarska parcela");

        jLabel6.setText("Nacin grejanja");

        jLabel7.setText("Namena objekta");

        jLabel21.setText("Ulica");

        cmbUlica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "2" }));
        cmbUlica.setSelectedIndex(-1);

        btnSacuvajObjekat.setText("Sacuvaj");
        btnSacuvajObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajObjekatActionPerformed(evt);
            }
        });

        btnIzmeniObjekat.setText("Izmeni");
        btnIzmeniObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniObjekatActionPerformed(evt);
            }
        });

        btnObrisiObjekat.setText("Obrisi");
        btnObrisiObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiObjekatActionPerformed(evt);
            }
        });

        cmbNacinGrejanja.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbVrstaPrikljucka.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbInstalacija.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbNamenaObjekta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbVrstaObjekta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bazna stanica mobilne telefonije", "Industrijski objekat", "Poslovni prostor", "Stambeni objekat" }));

        cmbPostanskiBrObjekat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "2" }));
        cmbPostanskiBrObjekat.setSelectedIndex(-1);

        jLabel22.setText("Ulica");

        cmbUlicaObjekat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "2" }));
        cmbUlicaObjekat.setSelectedIndex(-1);

        jLabel23.setText("Postanski broj");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel10))
                                        .addGap(60, 60, 60)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtDelovodniBr, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtIDMolbe, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(69, 69, 69)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel17))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBrizLKRM, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbKontaktOsoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20)
                                            .addComponent(jLabel21))
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cmbUlica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmbPostanskiBr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbKoordinatorTehnike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnIzmeniMolbu)
                                    .addComponent(btnObrisiMolbu)
                                    .addComponent(btnSacuvajMolbu)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtObjekatID, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtKatastarskaParcela, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(70, 70, 70)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel15))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbVrstaPrikljucka, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(134, 134, 134))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(cmbInstalacija, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel23)
                                                    .addComponent(jLabel14))
                                                .addGap(18, 18, 18))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbNacinGrejanja, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbNamenaObjekta, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel8))
                                        .addGap(136, 136, 136)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtUkupnaSnaga)
                                        .addComponent(cmbVrstaObjekta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbPostanskiBrObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(jLabel22)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbUlicaObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIzmeniObjekat)
                            .addComponent(btnObrisiObjekat)
                            .addComponent(btnSacuvajObjekat))
                        .addGap(142, 142, 142))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(675, 675, 675)
                            .addComponent(jLabel16)
                            .addGap(0, 390, Short.MAX_VALUE)))
                    .addGap(79, 79, 79)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(212, 212, 212)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvajObjekat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIzmeniObjekat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisiObjekat)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtObjekatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbVrstaPrikljucka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbVrstaObjekta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(cmbInstalacija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUkupnaSnaga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtKatastarskaParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmbNacinGrejanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(cmbNamenaObjekta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23)
                            .addComponent(cmbPostanskiBrObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22)
                            .addComponent(cmbUlicaObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSacuvajMolbu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnIzmeniMolbu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnObrisiMolbu)
                                .addGap(39, 39, 39))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(txtIDMolbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtDelovodniBr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel10))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmbObjekat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel12))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel18)
                                                    .addComponent(cmbKontaktOsoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel20)
                                                    .addComponent(cmbPostanskiBr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(jLabel21)
                                                    .addComponent(cmbUlica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtBrizLKRM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel17)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel19)
                                                .addComponent(cmbKoordinatorTehnike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 59, Short.MAX_VALUE))))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)
                    .addComponent(jLabel16)
                    .addContainerGap(512, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void ucitajPodatkeUFormu() throws Exception {

       objekti = Controller.getInstance().loadSveObjekte();
       DefaultTableModel modelDoznake = (DefaultTableModel) tblObjekat.getModel();

        for (Objekat o : objekti) {
            modelDoznake.addRow(new Object[]{o.getId_objekta(), o.getKatastarska_pacrela(), o.getVrsta_objekta(), o.getUkupna_snaga()});
        }
        
         if (cmbObjekat != null) {
            cmbObjekat.removeAllItems();
            for (Objekat o : objekti) {
                cmbObjekat.addItem(o.getVrsta_objekta());
            }
        } else {
            System.err.println("ComboBox (cmbObjekat) je null.");
        }
         
         grejanje = Controller.getInstance().loadSvaGrejanja();
          if (cmbNacinGrejanja != null) {
            cmbNacinGrejanja.removeAllItems();
            for (NacinGrejanja o : grejanje) {
                cmbNacinGrejanja.addItem(o.getNaziv());
            }
        } else {
            System.err.println("ComboBox (cmbNacinGrejanja) je null.");
        }
          
          vrsteprikljucaka = Controller.getInstance().loadSveVrstePrikljucaka();
          if (cmbVrstaPrikljucka != null) {
            cmbVrstaPrikljucka.removeAllItems();
            for (VrstaPrikljucka vp : vrsteprikljucaka) {
                cmbVrstaPrikljucka.addItem(vp.getNaziv());
            }
        } else {
            System.err.println("ComboBox (cmbVrstaPrikljucka) je null.");
        }
          
          instalacije = Controller.getInstance().loadSveInstalacije();
          if (cmbInstalacija != null) {
            cmbInstalacija.removeAllItems();
            for (TipInstalacije tp : instalacije) {
                cmbInstalacija.addItem(tp.getTip());
            }
        } else {
            System.err.println("ComboBox (cmbInstalacija) je null.");
        }
          
          namenaObjekta = Controller.getInstance().loadSveNameneObjekta();
          if (cmbNamenaObjekta != null) {
            cmbNamenaObjekta.removeAllItems();
            for (NamenaObjekta n : namenaObjekta) {
                cmbNamenaObjekta.addItem(n.getNaziv());
            }
        } else {
            System.err.println("ComboBox (cmbNamenaObjekta) je null.");
        }
          
          zaposleni= Controller.getInstance().loadSveZaposlene();
          if (cmbKontaktOsoba != null) {
            cmbKontaktOsoba.removeAllItems();
            for (ZaposleniPogled z : zaposleni) {
                cmbKontaktOsoba.addItem(z.getIme() + " " + z.getPrezime());
            }
        } else {
            System.err.println("ComboBox (cmbKontaktOsoba) je null.");
        }
          
           if (cmbKoordinatorTehnike != null) {
            cmbKoordinatorTehnike.removeAllItems();
            for (ZaposleniPogled z : zaposleni) {
                cmbKoordinatorTehnike.addItem(z.getIme() + " " + z.getPrezime());
            }
        } else {
            System.err.println("ComboBox (cmbKoordinatorTehnike) je null.");
        }
           
          ucitajPostanskeBrojeve();
          
          cmbUlica.setEnabled(false);

    cmbPostanskiBr.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            try {
                ucitajUliceZaPostanskiBroj();
            } catch (Exception ex) {
                Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });
          ucitajPostanskeBrojeveObjekat();
          
          cmbUlicaObjekat.setEnabled(false);
    
    cmbPostanskiBrObjekat.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            try {
                ucitajUliceZaPostanskiBrojObjekat();
            } catch (Exception ex) {
                Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });
          
    }

  private void ucitajPostanskeBrojeve() throws Exception {
     cmbUlica.setEnabled(true);
    ulice = Controller.getInstance().loadSveUlice();
    cmbPostanskiBr.removeAllItems();

    Set<String> jedinstveniPostanskiBr = new HashSet<>();
    for (Ulica u : ulice) {
        jedinstveniPostanskiBr.add(String.valueOf(u.getPostanski_br()));
    }
    for (String postanskiBr : jedinstveniPostanskiBr) {
        cmbPostanskiBr.addItem(postanskiBr);
    }
}

private void ucitajUliceZaPostanskiBroj() throws Exception {
    String izabraniPostanskiBr = (String) cmbPostanskiBr.getSelectedItem();

    if (izabraniPostanskiBr != null) {

        List<Ulica> filtriraneUlice = controller.Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(izabraniPostanskiBr) + "'");

        cmbUlica.removeAllItems();  
        for (Ulica u : filtriraneUlice) {
            cmbUlica.addItem(u.getNaziv());  
        }

        cmbUlica.setEnabled(!filtriraneUlice.isEmpty());
    }
}

private void ucitajPostanskeBrojeveObjekat() throws Exception {
    cmbUlicaObjekat.setEnabled(true);
    ulice = Controller.getInstance().loadSveUlice();
    cmbPostanskiBrObjekat.removeAllItems();

    Set<String> jedinstveniPostanskiBr = new HashSet<>();
    for (Ulica u : ulice) {
        jedinstveniPostanskiBr.add(String.valueOf(u.getPostanski_br()));
    }
    for (String postanskiBr : jedinstveniPostanskiBr) {
        cmbPostanskiBrObjekat.addItem(postanskiBr);
    }
}

private void ucitajUliceZaPostanskiBrojObjekat() throws Exception {
    String izabraniPostanskiBr = (String) cmbPostanskiBrObjekat.getSelectedItem();

    if (izabraniPostanskiBr != null) {

        List<Ulica> filtriraneUlice = controller.Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(izabraniPostanskiBr) + "'");

        cmbUlicaObjekat.removeAllItems();  
        for (Ulica u : filtriraneUlice) {
            cmbUlicaObjekat.addItem(u.getNaziv());  
        }

        cmbUlicaObjekat.setEnabled(!filtriraneUlice.isEmpty());
    }
}


private void popuniFormuIzabranimObjektom(Objekat o) throws Exception {
        if (o != null) {
            txtObjekatID.setText(String.valueOf(o.getId_objekta()));
            txtKatastarskaParcela.setText(String.valueOf(o.getKatastarska_pacrela()));
            txtUkupnaSnaga.setText(String.valueOf(o.getUkupna_snaga()));
            pronadjeneNameneObjekta = Controller.getInstance().searchNamenaObjekta("ID_NAMENA_OBJEKTA='" + String.valueOf(o.getId_namene_objekta()) + "'");
            cmbNamenaObjekta.setSelectedItem(pronadjeneNameneObjekta.get(0).getNaziv());
            cmbVrstaObjekta.setSelectedItem(String.valueOf(o.getVrsta_objekta()));
            pronadjenaGrejanja = Controller.getInstance().searchGrejanja("ID_NACIN_GREJANJA='" + String.valueOf(o.getId_nacin_grejanja()) + "'");
            cmbNacinGrejanja.setSelectedItem(pronadjenaGrejanja.get(0).getNaziv());
            pronadjeneInstalacije = Controller.getInstance().searchInstalacije("ID_INSTALACIJE='" + String.valueOf(o.getId_instalacije()) + "'");
            cmbInstalacija.setSelectedItem(pronadjeneInstalacije.get(0).getTip());
            pronadjeneVrstePrikljucka = Controller.getInstance().searchVrstaPrikljucka("ID_VRSTE_PRIKLJUCKA='" + String.valueOf(o.getId_vrste_prikljucka()) + "'");
            cmbVrstaPrikljucka.setSelectedItem(pronadjeneVrstePrikljucka.get(0).getNaziv());
            pronadjeneUlice = Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(o.getPostanski_br()) + "' AND ID_ULICE='" + String.valueOf(o.getId_ulice()) + "'");
            cmbPostanskiBrObjekat.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getPostanski_br()));
            cmbUlicaObjekat.setEnabled(true);
            cmbUlicaObjekat.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getNaziv()));
        }
    }


 private void setUpTableListenerObjekat() {
        tblObjekat.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    try {
                        Objekat o = jeIzabranObjekat();
                        pronadjeniObjekti = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + String.valueOf(o.getId_objekta()) + "'");
                        if (pronadjeniObjekti != null && !pronadjeniObjekti.isEmpty()) {
                            o = pronadjeniObjekti.get(0);
                        }
                        // POPUNI NJEGOVIM SPISKOVIMA
                        popuniFormuIzabranimObjektom(o);
                        popuniTabeluMolbama(o.getId_objekta());
                        originalneVrednostiObjekta.clear();
                        //sacuvajOriginalneVrednosti(tblMolba);
                    } catch (Exception ex) {
                        Logger.getLogger(ObjekatForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        private Objekat jeIzabranObjekat() {
        int objekatID = 0;
        int izabraniObjekatIndex = tblObjekat.getSelectedRow();
        if (izabraniObjekatIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblObjekat.getModel();
            Object izabraniID = model.getValueAt(izabraniObjekatIndex, 0);

            objekatID = (Integer) izabraniID;
        }
        Objekat o = new Objekat();
        o.setId_objekta(objekatID);
        return o;            }

        private void popuniTabeluMolbama(int id_objekta) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tblMolba.getModel();
        model.setRowCount(0);

        molbe = Controller.getInstance().searchMolbe("ID_OBJEKTA='" + String.valueOf(id_objekta) + "'");

        for (MolbaZaUrbanizam m : molbe) {
            model.addRow(new Object[]{m.getId_molbe(), m.getDatum(), m.getDelovodni_br(), m.getBr_iz_LKRM(), m.getId_objekta()});
        }            }
        }
        );
    }
 
  private MolbaZaUrbanizam jeIzabranaMolba() {
        int molbaID = 0;
        int izabranaMolbsIndex = tblMolba.getSelectedRow();
        if (izabranaMolbsIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblMolba.getModel();
            Object izabraniID = model.getValueAt(izabranaMolbsIndex, 0);

            molbaID = (Integer) izabraniID;
        }
        MolbaZaUrbanizam m = new MolbaZaUrbanizam();
        m.setId_molbe(molbaID);
        return m;     
  }
 
  private void setUpTableListenerMolba() {
        tblMolba.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    try {
                        MolbaZaUrbanizam izabranaMolba = jeIzabranaMolba();
                        pronadjeneMolbe = Controller.getInstance().searchMolbe("ID_MOLBE='" + String.valueOf(izabranaMolba.getId_molbe())+ "'");

                        if (pronadjeneMolbe != null && !pronadjeneMolbe.isEmpty()) {
                            izabranaMolba = pronadjeneMolbe.get(0);
                        }
                        //POPUNI FORMU STAVKOM
                        popuniFormuMolbom(izabranaMolba);
                    } catch (Exception ex) {
                        Logger.getLogger(ObjekatForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            private void popuniFormuMolbom(MolbaZaUrbanizam izabranaMolba) throws Exception {
            if (izabranaMolba != null) {
            txtIDMolbe.setText(String.valueOf(izabranaMolba.getId_molbe()));
            txtDelovodniBr.setText(String.valueOf(izabranaMolba.getDelovodni_br()));

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            txtDatum.setText(dateFormat.format(izabranaMolba.getDatum()));

            txtBrizLKRM.setText(String.valueOf(izabranaMolba.getBr_iz_LKRM()));

            if (izabranaMolba.getId_kontakt_osobe()!= 0) {
           List<ZaposleniPogled> kontakt_osoba = Controller.getInstance().searchZaposleni("ID_ZAPOSLENOG='" + izabranaMolba.getId_kontakt_osobe() + "'");
            if (!kontakt_osoba.isEmpty()) {
                cmbKontaktOsoba.setSelectedItem(kontakt_osoba.get(0).toString());
}

        }

        if (izabranaMolba.getId_koordinatora_tehnike()!= 0) {
            List<ZaposleniPogled> koordinator_tehnike = Controller.getInstance().searchZaposleni("ID_ZAPOSLENOG='" + izabranaMolba.getId_koordinatora_tehnike()+ "'");
            if (!koordinator_tehnike.isEmpty()) {
                cmbKoordinatorTehnike.setSelectedItem(koordinator_tehnike.get(0).toString());
            }
        }

        if (izabranaMolba.getId_objekta() != 0) {
            List<Objekat> objekat = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + izabranaMolba.getId_objekta() + "'");
            if (!objekat.isEmpty()) {
                cmbObjekat.setSelectedItem(objekat.get(0).toString());
            }
        }

            pronadjeneUlice = Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(izabranaMolba.getPostanski_br()) + "' AND ID_ULICE='" + String.valueOf(izabranaMolba.getId_ulice()) + "'");
            cmbPostanskiBr.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getPostanski_br()));
            cmbUlica.setEnabled(true);
            cmbUlica.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getNaziv()));

          
        }
            }
        }
        );
    }

    private void btnSacuvajMolbuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajMolbuActionPerformed
        
    }//GEN-LAST:event_btnSacuvajMolbuActionPerformed

    private void btnIzmeniMolbuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniMolbuActionPerformed
        
    }//GEN-LAST:event_btnIzmeniMolbuActionPerformed

    private void btnObrisiMolbuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiMolbuActionPerformed
        
    }//GEN-LAST:event_btnObrisiMolbuActionPerformed

    private void btnSacuvajObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajObjekatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSacuvajObjekatActionPerformed

    private void btnIzmeniObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniObjekatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnIzmeniObjekatActionPerformed

    private void btnObrisiObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiObjekatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnObrisiObjekatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObjekatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObjekatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObjekatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObjekatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ObjekatForm().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ObjekatForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniMolbu;
    private javax.swing.JButton btnIzmeniObjekat;
    private javax.swing.JButton btnObrisiMolbu;
    private javax.swing.JButton btnObrisiObjekat;
    private javax.swing.JButton btnSacuvajMolbu;
    private javax.swing.JButton btnSacuvajObjekat;
    private javax.swing.JComboBox<String> cmbInstalacija;
    private javax.swing.JComboBox<String> cmbKontaktOsoba;
    private javax.swing.JComboBox<String> cmbKoordinatorTehnike;
    private javax.swing.JComboBox<String> cmbNacinGrejanja;
    private javax.swing.JComboBox<String> cmbNamenaObjekta;
    private javax.swing.JComboBox<String> cmbObjekat;
    private javax.swing.JComboBox<String> cmbPostanskiBr;
    private javax.swing.JComboBox<String> cmbPostanskiBrObjekat;
    private javax.swing.JComboBox<String> cmbUlica;
    private javax.swing.JComboBox<String> cmbUlicaObjekat;
    private javax.swing.JComboBox<String> cmbVrstaObjekta;
    private javax.swing.JComboBox<String> cmbVrstaPrikljucka;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMolba;
    private javax.swing.JTable tblObjekat;
    private javax.swing.JTextField txtBrizLKRM;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtDelovodniBr;
    private javax.swing.JTextField txtIDMolbe;
    private javax.swing.JTextField txtKatastarskaParcela;
    private javax.swing.JTextField txtObjekatID;
    private javax.swing.JTextField txtUkupnaSnaga;
    // End of variables declaration//GEN-END:variables
}
