/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import Domain.Object.entities.Objekat;
import Domain.Object.entities.Snaga;
import controller.Controller;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class SnagaForm extends javax.swing.JFrame {

    List<Objekat> objekti = new ArrayList<>();
    List<Objekat> pronadjeniObjekti = new ArrayList<>();
    List<Snaga> snaga = new ArrayList<>();
    List<Snaga> pronadjenaSnaga = new ArrayList<>();
        private final HashMap<Integer, String[]> originalneVrednosti = new HashMap<>();

    /**
     * Creates new form SnagaForm
     * @throws java.lang.Exception
     */
    public SnagaForm() throws Exception {
        initComponents();
        setTitle("Snaga");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        ucitajObjekte();
        setUpTableListenerSnaga();
        setUpTableListenerObjekat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnObrisi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSnaga = new javax.swing.JTable();
        txtIDSnage = new javax.swing.JTextField();
        txtJacina = new javax.swing.JTextField();
        btnIzmeniObjekat = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblObjekat = new javax.swing.JTable();
        cmbObjekat = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Objekat");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel9.setText("Jacina");

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel1.setText("Snaga");

        tblSnaga.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Snage", "ID Objekta", "Naziv", "Jacina"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSnaga);

        btnIzmeniObjekat.setText("Izmeni objekat");
        btnIzmeniObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniObjekatActionPerformed(evt);
            }
        });

        jLabel2.setText("ID Snage");

        jLabel3.setText("Naziv");

        jLabel10.setText("Objekti");

        tblObjekat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Objekta", "Katastarska Parcela", "Vrsta Objekta", "Ukupna snaga"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblObjekat);

        cmbObjekat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnSacuvaj)
                        .addGap(151, 151, 151)
                        .addComponent(btnIzmeni)
                        .addGap(171, 171, 171)
                        .addComponent(btnObrisi)
                        .addGap(0, 179, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtIDSnage, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(cmbObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(229, 229, 229)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtJacina, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnIzmeniObjekat)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(159, 159, 159))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addGap(444, 444, 444))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIDSnage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(txtJacina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnObrisi))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnIzmeniObjekat)
                .addGap(123, 123, 123))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void sacuvajOriginalneVrednosti(JTable table) {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    originalneVrednosti.clear(); 

    for (int i = 0; i < model.getRowCount(); i++) {
        int id_objekta = Integer.parseInt(model.getValueAt(i, 0).toString());
        String katastarska_parcela = model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "0";
        String vrsta_objekta = model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
        String ukupna_snaga = model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "0";

        originalneVrednosti.put(id_objekta, new String[]{katastarska_parcela, vrsta_objekta, ukupna_snaga});

    }
}




    
    private void reloadGridSnaga() {
        tblSnaga = new javax.swing.JTable();
        jScrollPane1.setViewportView(tblSnaga);
        tblSnaga.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID Snage", "ID Objekta", "Naziv", "Jacina"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Integer.class,java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        this.setUpTableListenerSnaga();
    }

    private void reloadGridObjekat() {
        tblObjekat = new javax.swing.JTable();
        jScrollPane1.setViewportView(tblObjekat);
        tblObjekat.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID Objekta", "Katastarska parcela", "Vrsta objekta", "Ukupna snaga"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class,java.lang.Float.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        setUpTableListenerObjekat();
    }
     private void ucitajPodatkeUFormu() throws Exception {
         
        snaga = Controller.getInstance().loadSveSnage();
        DefaultTableModel modelSnage = (DefaultTableModel) tblSnaga.getModel();
        
         modelSnage.setRowCount(0); 

        for (Snaga s : snaga) {
            modelSnage.addRow(new Object[]{s.getId_snage(), s.getId_objekta(), s.getNaziv(), s.getJacina()});
        }

          
    }
     
      private void ucitajObjekte() throws Exception {

       objekti = Controller.getInstance().loadSveObjekte();
       DefaultTableModel modelDoznake = (DefaultTableModel) tblObjekat.getModel();
       
        modelDoznake.setRowCount(0); 

        for (Objekat o : objekti) {
            modelDoznake.addRow(new Object[]{o.getId_objekta(), o.getKatastarska_pacrela(), o.getVrsta_objekta(), o.getUkupna_snaga()});
        }
        
         if (cmbObjekat != null) {
            cmbObjekat.removeAllItems();
            for (Objekat o : objekti) {
                cmbObjekat.addItem(String.valueOf(o.getId_objekta()));
            }
        } else {
            System.err.println("ComboBox (cmbObjekat) je null.");
        }
          sacuvajOriginalneVrednosti(tblObjekat);
         

          
    }
     
      private Snaga jeIzabranaSnaga() {
        int snagaID = 0;
        int izabranaSnagaIndex = tblSnaga.getSelectedRow();
        if (izabranaSnagaIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblSnaga.getModel();
            Object izabraniID = model.getValueAt(izabranaSnagaIndex, 0);

            snagaID = (Integer) izabraniID;
        }
        Snaga s = new Snaga();
        s.setId_snage(snagaID);
        return s;
    }
      
       private Objekat jeIzabranObjekat() {
        int objekatID = 0;
        int izabranObjekatIndex = tblObjekat.getSelectedRow();
        if (izabranObjekatIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblObjekat.getModel();
            Object izabraniID = model.getValueAt(izabranObjekatIndex, 0);

            objekatID = (Integer) izabraniID;
        }
        Objekat o = new Objekat();
        o.setId_objekta(objekatID);
        return o;
    }
      
      private void popuniTabeluSnagama(int id_objekta) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tblSnaga.getModel();
        model.setRowCount(0);

        snaga = controller.Controller.getInstance().searchSnaga("ID_OBJEKTA='" + String.valueOf(id_objekta) + "'");

         for (Snaga s : snaga) {
            model.addRow(new Object[]{s.getId_snage(), s.getId_objekta(), s.getNaziv(), s.getJacina()});
        }
    }
     private void popuniFormuSnagom(Snaga snaga) throws Exception {
    if (snaga != null) {
        txtIDSnage.setText(String.valueOf(snaga.getId_snage()));
        txtNaziv.setText(String.valueOf(snaga.getNaziv()));
        txtJacina.setText(String.valueOf(snaga.getJacina()));

        pronadjeniObjekti = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + snaga.getId_objekta() + "'");

        if (cmbObjekat != null) {
            cmbObjekat.removeAllItems();  
            for (Objekat o : objekti) {   
                cmbObjekat.addItem(String.valueOf(o.getId_objekta()));
            }

            if (pronadjeniObjekti != null && !pronadjeniObjekti.isEmpty()) {
                cmbObjekat.setSelectedItem(String.valueOf(pronadjeniObjekti.get(0).getId_objekta()));
            }
        } else {
            System.out.println("ComboBox (cmbObjekat) je null.");
        }
    }
}

      
      private void setUpTableListenerSnaga() {
        tblSnaga.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Snaga izabranaSnaga = jeIzabranaSnaga();
                    pronadjenaSnaga = Controller.getInstance().searchSnaga("ID_SNAGE='" + String.valueOf(izabranaSnaga.getId_snage()) + "'");
                    
                    if (pronadjenaSnaga != null && !pronadjenaSnaga.isEmpty()) {
                        izabranaSnaga = pronadjenaSnaga.get(0);
                    }
                    popuniFormuSnagom(izabranaSnaga);
                    originalneVrednosti.clear();
                    sacuvajOriginalneVrednosti(tblObjekat);
                } catch (Exception ex) {
                    Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
      
      private void setUpTableListenerObjekat() {
        tblObjekat.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Objekat izabraniObjekat = jeIzabranObjekat();
                    pronadjeniObjekti = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + String.valueOf(izabraniObjekat.getId_objekta()) + "'");
                    
                    if (pronadjeniObjekti != null && !pronadjeniObjekti.isEmpty()) {
                        izabraniObjekat = pronadjeniObjekti.get(0);
                    }
                    popuniTabeluSnagama(izabraniObjekat.getId_objekta());
                } catch (Exception ex) {
                    Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
      
      private Snaga preuzmiPodatkeZaSNagu() throws Exception {
        int id_snage = Integer.parseInt(txtIDSnage.getText());
        String naziv = txtNaziv.getText();
        float jacina = Float.parseFloat(txtJacina.getText());
        String objekat = (String) cmbObjekat.getSelectedItem();
        List<Objekat> pronadjenObjekat = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + objekat + "'");

        if (pronadjenObjekat.isEmpty()) {
            throw new Exception("Objekat nije pronađen.");
        }
        int id_objekta = pronadjenObjekat.get(0).getId_objekta();
        

        Snaga snaga = new Snaga(id_snage, id_objekta, naziv, jacina);

        return snaga;
    }
      
  public String generisiSetKlauzuObjekat(JTable table, int selectedRow) {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    StringBuilder setClause = new StringBuilder();

    int idObjekta = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());

    System.out.println("Svi sačuvani ID-jevi: " + originalneVrednosti.keySet());
    if (!originalneVrednosti.containsKey(idObjekta)) {
        System.out.println("ID objekta nije pronađen u originalnim vrednostima: " + idObjekta);
        return "";
    }

    String[] original = originalneVrednosti.get(idObjekta);
    String katastarska_parcela = model.getValueAt(selectedRow, 1) != null ? model.getValueAt(selectedRow, 1).toString() : "0";
    String vrsta_objekta = model.getValueAt(selectedRow, 2) != null ? model.getValueAt(selectedRow, 2).toString() : "";
    String ukupna_snaga = model.getValueAt(selectedRow, 3) != null ? model.getValueAt(selectedRow, 3).toString() : "0";
    String originalKatastarskaParcela = original[0];
    String originalVrstaObjekta = original[1];
    String originalUkupnaSnaga = original[2];

    if (!katastarska_parcela.equals(originalKatastarskaParcela)) {
        setClause.append("KATASTARSKA_PARCELA = '").append(katastarska_parcela).append("'");
    }
    
    if (!vrsta_objekta.equals(originalVrstaObjekta)) {
        setClause.append("VRSTA_OBJEKTA = '").append(vrsta_objekta).append("'");
    }
    if (!ukupna_snaga.equals(originalUkupnaSnaga)) {
        if (setClause.length() > 0) {
            setClause.append(", ");
        }
        setClause.append("UKUPNA_SNAGA = ").append(ukupna_snaga);
    }

    System.out.println("Generisana SET klauzula: " + setClause.toString());

    return setClause.toString();
}

      


    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            Snaga snaga = preuzmiPodatkeZaSNagu();

            Controller.getInstance().insertSnaga(snaga);

            ucitajPodatkeUFormu();
            ucitajObjekte();
        } catch (Exception ex) {
            Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        try {
            Snaga snaga = preuzmiPodatkeZaSNagu();

            Controller.getInstance().updateSnaga(snaga);

            ucitajPodatkeUFormu();
            ucitajObjekte();
        } catch (Exception ex) {
            Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
         try {
            Snaga snaga = jeIzabranaSnaga();

            Controller.getInstance().deleteSnaga(snaga);

            ucitajPodatkeUFormu();
            ucitajObjekte();

        } catch (Exception ex) {
            Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnIzmeniObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniObjekatActionPerformed
        try {
            Objekat o = jeIzabranObjekat();

            String setClause = generisiSetKlauzuObjekat(tblObjekat, tblObjekat.getSelectedRow());

            Controller.getInstance().updateObjekat(o, setClause);

            ucitajObjekte();
        } catch (Exception ex) {
            Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniObjekatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnagaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnagaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnagaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnagaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SnagaForm().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(SnagaForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnIzmeniObjekat;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<String> cmbObjekat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblObjekat;
    private javax.swing.JTable tblSnaga;
    private javax.swing.JTextField txtIDSnage;
    private javax.swing.JTextField txtJacina;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables
}
