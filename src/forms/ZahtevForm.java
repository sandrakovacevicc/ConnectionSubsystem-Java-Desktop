/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import Domain.Object.entities.Objekat;
import Domain.Object.entities.Zahtev;
import Domain.Object.entities.ZaposleniPogled;
import controller.Controller;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class ZahtevForm extends javax.swing.JFrame {

    List<Zahtev> zahtevi = new ArrayList<>();
    List<Zahtev> pronadjeniZahtev = new ArrayList<>();
    List<ZaposleniPogled> zaposleni = new ArrayList<>();
    List<Objekat> objekti = new ArrayList<>();
    private Date originalDatum;
    private final HashMap<Integer, String[]> originalneVrednostiZahteva = new HashMap<>();
    public ZahtevForm() throws Exception {
        initComponents();
        setTitle("Zahtev");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListener();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        rbDP2 = new javax.swing.JRadioButton();
        rbDP3 = new javax.swing.JRadioButton();
        rbDP1 = new javax.swing.JRadioButton();
        rbDP4 = new javax.swing.JRadioButton();
        btnUcitajZahteve = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtBrZahteva = new javax.swing.JTextField();
        txtDatum = new javax.swing.JTextField();
        cmbZaposleniPodnosioc = new javax.swing.JComboBox<>();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        rbAll = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblZahtev = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmbZaposleniZastupnik = new javax.swing.JComboBox<>();
        cmbObjekat = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("BR Zahteva");

        rbDP2.setText("2021 - 2022");

        rbDP3.setText("2022 - 2023");
        rbDP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDP3ActionPerformed(evt);
            }
        });

        rbDP1.setText("2020 - 2021");
        rbDP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDP1ActionPerformed(evt);
            }
        });

        rbDP4.setText("2023 - 2024");

        btnUcitajZahteve.setText("Ucitaj");
        btnUcitajZahteve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUcitajZahteveActionPerformed(evt);
            }
        });

        jLabel7.setText("Zaposleni Podnosioc");

        jLabel9.setText("Zaposleni Zastupnik");

        txtDatum.setText("dd-MM-yyyy");

        cmbZaposleniPodnosioc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel11.setText("Objekat");

        rbAll.setText("Svi zahtevi");
        rbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllActionPerformed(evt);
            }
        });

        jLabel1.setText("Zahtev");

        tblZahtev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BR Zahteva", "Datum", "Zaposleni Podosioc", "Zaposleni Zastupnik", "ID Objekta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblZahtev);

        jLabel2.setText("Datum");

        cmbZaposleniZastupnik.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbObjekat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(441, 441, 441)
                                .addComponent(jLabel1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbAll)
                            .addComponent(rbDP2)
                            .addComponent(rbDP3)
                            .addComponent(rbDP1)
                            .addComponent(rbDP4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnUcitajZahteve))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(txtBrZahteva, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(cmbZaposleniPodnosioc, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbZaposleniZastupnik, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSacuvaj)
                            .addComponent(btnIzmeni))))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDP1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDP2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDP3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDP4)
                                .addGap(18, 18, 18)
                                .addComponent(btnUcitajZahteve))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbZaposleniPodnosioc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(cmbZaposleniZastupnik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtBrZahteva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbObjekat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzmeni)
                        .addGap(18, 18, 18)
                        .addComponent(btnSacuvaj)
                        .addGap(25, 25, 25)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void ucitajPodatkeUFormu() throws Exception {

         // OBJEKTI
        objekti = Controller.getInstance().loadSveObjekte();

        if (cmbObjekat != null) {
            cmbObjekat.removeAllItems();
            for (Objekat o : objekti) {
                cmbObjekat.addItem(o.getVrsta_objekta());
            }
        } else {
            System.err.println("ComboBox (cbZaposleni) je null.");
        }
        // ZAPOSLENI
        zaposleni = Controller.getInstance().loadSveZaposlene();

        if (cmbZaposleniPodnosioc != null) {
            cmbZaposleniPodnosioc.removeAllItems();
            for (ZaposleniPogled z : zaposleni) {
                cmbZaposleniPodnosioc.addItem(z.getIme()+ " " + z.getPrezime());
            }
        } else {
            System.err.println("ComboBox (cbZaposleni) je null.");
        }
        
        if (cmbZaposleniZastupnik != null) {
            cmbZaposleniZastupnik.removeAllItems();
            for (ZaposleniPogled z : zaposleni) {
                cmbZaposleniZastupnik.addItem(z.getIme()+ " " + z.getPrezime());
            }
        } else {
            System.err.println("ComboBox (cbZaposleni) je null.");
        }

        // ZAHTEVI
        ucitajZahteve(false);

        rbAll.setSelected(true);

    }

     private void reloadGrid(){
        tblZahtev = new javax.swing.JTable();
        jScrollPane1.setViewportView(tblZahtev);
        tblZahtev.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BR Zahteva", "Datum", "Zaposleni Podnosioc", "Zaposleni Zastupnik","ID Objekta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, false,false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        this.setUpTableListener();
    }

    private void ucitajZahteve(Boolean isPartition) throws Exception {
        this.reloadGrid();
        
        if(isPartition == false) {
            zahtevi = Controller.getInstance().loadSveZahteve();
        }
        
        DefaultTableModel modelZahtevi = (DefaultTableModel) tblZahtev.getModel();

        for (Zahtev z : zahtevi) {
            modelZahtevi.addRow(new Object[]{z.getBr_zahteva(), z.getDatum(), z.getZaposleni_podnosioc(), z.getZaposleni_zastupnik(),z.getId_objekta()});
        }
        
        
        sacuvajOriginalneVrednosti(tblZahtev);
    }
    
    private Zahtev preuzmiPodatkeZaZahtev() throws Exception {
        int br_zahteva = Integer.parseInt(txtBrZahteva.getText());

        String rawDatum = txtDatum.getText();

        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");

        Date datum = null;

        try {

            if (!rawDatum.isEmpty()) {
                datum = inputFormat.parse(rawDatum);
            }
        } catch (ParseException e) {
            System.err.println("Neispravan format datuma: " + e.getMessage());

        }

      
        if (cmbZaposleniPodnosioc.getSelectedItem() == null || cmbZaposleniZastupnik.getSelectedItem() == null ||
            cmbObjekat.getSelectedItem() == null) {
            throw new Exception("Molimo vas da odaberete sve potrebne vrednosti iz padajućih menija.");
        }

 
        String imePrezime = (String) cmbZaposleniZastupnik.getSelectedItem();
        String[] delovi = imePrezime.trim().split("\\s+"); 

        if (delovi.length < 2) {
            throw new Exception("Neispravan format imena i prezimena zaposlenog.");
        }

        String ime = delovi[0];  
        String prezime = delovi[delovi.length - 1];


        List<ZaposleniPogled> pronadjeniZaposleniZ = Controller.getInstance().searchZaposleni("ime='" + ime + "' AND prezime='" + prezime + "'");

        if (pronadjeniZaposleniZ.isEmpty()) {
            throw new Exception("Zaposleni sa imenom " + ime + " i prezimenom " + prezime + " nije pronađen.");
        }

        int id_zaposlenogZ = pronadjeniZaposleniZ.get(0).getId_zaposlenog();
        
        String imePrezimeP = (String) cmbZaposleniPodnosioc.getSelectedItem();
        String[] deloviP = imePrezimeP.trim().split("\\s+"); 

        if (deloviP.length < 2) {
            throw new Exception("Neispravan format imena i prezimena zaposlenog.");
        }

        String imeP = deloviP[0];  
        String prezimeP = deloviP[deloviP.length - 1];


        List<ZaposleniPogled> pronadjeniZaposleniP = Controller.getInstance().searchZaposleni("ime='" + imeP + "' AND prezime='" + prezimeP + "'");

        if (pronadjeniZaposleniP.isEmpty()) {
            throw new Exception("Zaposleni sa imenom " + ime + " i prezimenom " + prezime + " nije pronađen.");
        }
        
        int id_zaposlenogP = pronadjeniZaposleniP.get(0).getId_zaposlenog();
        
        String objekat = (String) cmbObjekat.getSelectedItem();
        List<Objekat> pronadjenObjekat = Controller.getInstance().searchObjekti("VRSTA_OBJEKTA='" + objekat + "'");

        if (pronadjenObjekat.isEmpty()) {
            throw new Exception("Objekat nije pronađen.");
        }
        int id_ojekta = pronadjenObjekat.get(0).getId_objekta();

        Zahtev z = new Zahtev(br_zahteva, datum, id_zaposlenogP, id_zaposlenogZ, id_ojekta);

        return z;

    }

    
   private Zahtev jeIzabraniZahtev() {
    int br_zahteva = 0;
    int izabraniZahtevIndex = tblZahtev.getSelectedRow();
    
    if (izabraniZahtevIndex >= 0) {
        DefaultTableModel model = (DefaultTableModel) tblZahtev.getModel();
        Object izabrani_br = model.getValueAt(izabraniZahtevIndex, 0);
        
        try {
            br_zahteva = Integer.parseInt(izabrani_br.toString());
        } catch (NumberFormatException e) {
            System.err.println("Greška pri parsiranju broja zahteva: " + e.getMessage());
        }
    }
    
    Zahtev z = new Zahtev();
    z.setBr_zahteva(br_zahteva);
    return z;
}

private void popuniFormuIzabranimZahtevom(Zahtev z) throws Exception {
    if (z != null) {
        txtBrZahteva.setText(String.valueOf(z.getBr_zahteva()));

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        if (z.getDatum() != null) {
            txtDatum.setText(dateFormat.format(z.getDatum()));
            originalDatum = z.getDatum();
        } else {
            txtDatum.setText(""); 
        }

        if (z.getZaposleni_podnosioc() != 0) {
           List<ZaposleniPogled> zaposleni_podnosioc = Controller.getInstance().searchZaposleni("ID_ZAPOSLENOG='" + z.getZaposleni_podnosioc() + "'");
        if (!zaposleni_podnosioc.isEmpty()) {
                cmbZaposleniPodnosioc.setSelectedItem(zaposleni_podnosioc.get(0).toString());
}

        }

        if (z.getZaposleni_zastupnik() != 0) {
            List<ZaposleniPogled> zaposleni_zastupnik = Controller.getInstance().searchZaposleni("ID_ZAPOSLENOG='" + z.getZaposleni_zastupnik() + "'");
            if (!zaposleni_zastupnik.isEmpty()) {
                cmbZaposleniZastupnik.setSelectedItem(zaposleni_zastupnik.get(0).toString());
            }
        }

        if (z.getId_objekta() != 0) {
            List<Objekat> objekat = Controller.getInstance().searchObjekti("ID_OBJEKTA='" + z.getId_objekta() + "'");
            if (!objekat.isEmpty()) {
                cmbObjekat.setSelectedItem(objekat.get(0).toString());
            }
        }
    }
    
}


 private void sacuvajOriginalneVrednosti(JTable table) {
        DefaultTableModel model = (DefaultTableModel) tblZahtev.getModel();

         for (int i = 0; i < model.getRowCount(); i++) {
            int br_zahteva = (Integer) model.getValueAt(i, 0);
            String datum = (String) model.getValueAt(i, 1).toString();
            int zaposleni_podnosioc = (Integer) model.getValueAt(i, 2);
            int zaposleni_zastupnik = (Integer) model.getValueAt(i, 3);
            int id_objekta = (Integer) model.getValueAt(i, 4);


            originalneVrednostiZahteva.put(i, new String[]{String.valueOf(br_zahteva), datum, String.valueOf(zaposleni_podnosioc), String.valueOf(zaposleni_zastupnik), String.valueOf(id_objekta)});
        }
    }


    
     private void setUpTableListener() {
        tblZahtev.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Zahtev izabraniZahtev= jeIzabraniZahtev();
                    pronadjeniZahtev = Controller.getInstance().searchZahteve("BR_ZAHTEVA='" + String.valueOf(izabraniZahtev.getBr_zahteva()) + "'");
                    
                    if (pronadjeniZahtev != null && !pronadjeniZahtev.isEmpty()) {
                        izabraniZahtev = pronadjeniZahtev.get(0);
                    }
                    popuniFormuIzabranimZahtevom(izabraniZahtev);
                } catch (Exception ex) {
                    Logger.getLogger(ZahtevForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    private void rbDP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDP3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbDP3ActionPerformed

    private void btnUcitajZahteveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUcitajZahteveActionPerformed
        try {
            if (rbAll.isSelected()) {
                zahtevi = Controller.getInstance().loadSveZahteve();
            }
            if (rbDP1.isSelected()) {
                zahtevi = Controller.getInstance().getParticijeZahtevi("PARTITION (p2021)");
            }
            if (rbDP2.isSelected()) {
                zahtevi = Controller.getInstance().getParticijeZahtevi("PARTITION (p2022)");
            }
            if (rbDP3.isSelected()) {
                zahtevi = Controller.getInstance().getParticijeZahtevi("PARTITION (p2023)");
            }
            if (rbDP4.isSelected()) {
                zahtevi = Controller.getInstance().getParticijeZahtevi("PARTITION (SYS_P426)");
            }
            ucitajZahteve(true);
        } catch (Exception ex) {
            Logger.getLogger(ZahtevForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUcitajZahteveActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
       try {
            Zahtev z = preuzmiPodatkeZaZahtev();

            Controller.getInstance().insertZahtev(z);

            ucitajZahteve(false);
        } catch (Exception ex) {
            Logger.getLogger(ZahtevForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
     try {
        Zahtev z = preuzmiPodatkeZaZahtev();
        int izabraniZahtevIndex = tblZahtev.getSelectedRow();
        
        if (izabraniZahtevIndex >= 0) {
            Date noviDatum = new SimpleDateFormat("dd-MM-yyyy").parse(txtDatum.getText());  
            
            if (!noviDatum.equals(originalDatum)) {
                throw new Exception("Datum se ne može promeniti.");
            }
        }

        Controller.getInstance().updateZahtev(z);
        ucitajZahteve(false);  
        
    } catch (Exception ex) {
        java.util.logging.Logger.getLogger(GradForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);

        int izabraniZahtevIndex = tblZahtev.getSelectedRow();
        if (izabraniZahtevIndex >= 0) {
            tblZahtev.setRowSelectionInterval(izabraniZahtevIndex, izabraniZahtevIndex);
        }
    }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void rbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbAllActionPerformed

    private void rbDP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbDP1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZahtevForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZahtevForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZahtevForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZahtevForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ZahtevForm().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(ZahtevForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnUcitajZahteve;
    private javax.swing.JComboBox<String> cmbObjekat;
    private javax.swing.JComboBox<String> cmbZaposleniPodnosioc;
    private javax.swing.JComboBox<String> cmbZaposleniZastupnik;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbDP1;
    private javax.swing.JRadioButton rbDP2;
    private javax.swing.JRadioButton rbDP3;
    private javax.swing.JRadioButton rbDP4;
    private javax.swing.JTable tblZahtev;
    private javax.swing.JTextField txtBrZahteva;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables
}
