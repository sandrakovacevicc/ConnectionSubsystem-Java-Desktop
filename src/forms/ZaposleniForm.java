/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import Domain.Object.entities.Filijala;
import Domain.Object.entities.Ulica;
import Domain.Object.entities.ZaposleniOsnovno;
import Domain.Object.entities.ZaposleniPogled;
import controller.Controller;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class ZaposleniForm extends javax.swing.JFrame {

    List<Filijala> filijale = new LinkedList<Filijala>();
    List<Filijala> pronadjeneFilijale = new LinkedList<Filijala>();
    List<Ulica> ulice = new LinkedList<Ulica>();
    List<Ulica> pronadjeneUlice = new LinkedList<Ulica>();
    List<ZaposleniOsnovno> zaposleniOsnovno = new LinkedList<ZaposleniOsnovno>();
    List<ZaposleniPogled> pronadjenIzabraniZaposleni = new LinkedList<ZaposleniPogled>();
    
    public ZaposleniForm() throws Exception {
        initComponents();
        setTitle("Nalog za isplatu");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListener();
    }
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtIDZaposlenog = new javax.swing.JTextField();
        cmbUlica = new javax.swing.JComboBox<>();
        txtIme = new javax.swing.JTextField();
        cmbFilijala = new javax.swing.JComboBox<>();
        cmbPostanskiBr = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnObrisi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblZaposleni = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtKontakt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPrezime = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel9.setText("Ulica");

        jLabel2.setText("Ime");

        cmbUlica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbUlica.setSelectedIndex(-1);

        cmbFilijala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbPostanskiBr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("ID Zaposlenog");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel11.setText("Filijala");

        jLabel1.setText("Zaposleni");

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        tblZaposleni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Zaposlenog", "Ime", "Prezime"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblZaposleni);

        jLabel7.setText("PostanskiBr");

        jLabel3.setText("Kontakt");

        jLabel5.setText("Prezime");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(txtIDZaposlenog, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtKontakt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrezime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPostanskiBr, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFilijala, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUlica, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnObrisi))
                .addGap(0, 18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnIzmeni)
                        .addGap(18, 18, 18)
                        .addComponent(btnSacuvaj)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cmbPostanskiBr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(cmbUlica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtIDZaposlenog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(cmbFilijala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtKontakt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reloadGrid() {
        tblZaposleni = new javax.swing.JTable();
        jScrollPane1.setViewportView(tblZaposleni);
        tblZaposleni.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "ID Zaposlenog", "Ime","Prezime"
                }
        ) {
            Class[] types = new Class[]{
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class
        };

            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        this.setUpTableListener();
    }
    
   private void ucitajPodatkeUFormu() throws Exception {
    // Filijale
    filijale = Controller.getInstance().loadSveFilijale();
    cmbFilijala.removeAllItems();
    for (Filijala f : filijale) {
        cmbFilijala.addItem(f.getNaziv());
    }

    // Poštanski brojevi
    ucitajPostanskeBrojeve();

    // Ispravan listener za poštanski broj
    cmbPostanskiBr.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            try {
                ucitajUliceZaPostanskiBroj();
            } catch (Exception ex) {
                Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });

    // Onemogućavamo comboBox za ulice dok se ne izabere poštanski broj
    cmbUlica.setEnabled(false);

    // Zaposleni
    ucitajZaposlene();
}

// Metoda za učitavanje svih poštanskih brojeva
private void ucitajPostanskeBrojeve() throws Exception {
    ulice = Controller.getInstance().loadSveUlice();
    cmbPostanskiBr.removeAllItems();
    
    // Dodajemo samo jedinstvene poštanske brojeve
    Set<String> jedinstveniPostanskiBr = new HashSet<>();
    for (Ulica u : ulice) {
        jedinstveniPostanskiBr.add(String.valueOf(u.getPostanski_br()));
    }
    for (String postanskiBr : jedinstveniPostanskiBr) {
        cmbPostanskiBr.addItem(postanskiBr);
    }
}

// Metoda koja se poziva kada korisnik izabere poštanski broj
private void ucitajUliceZaPostanskiBroj() throws Exception {
    String izabraniPostanskiBr = (String) cmbPostanskiBr.getSelectedItem();

    if (izabraniPostanskiBr != null) {
        // Učitavamo samo ulice za odabrani poštanski broj
        List<Ulica> filtriraneUlice = controller.Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(izabraniPostanskiBr) + "'");

        cmbUlica.removeAllItems();  // Čistimo prethodne podatke
        for (Ulica u : filtriraneUlice) {
            cmbUlica.addItem(u.getNaziv());  
        }

        // Ako postoje ulice, omogućavamo comboBox
        cmbUlica.setEnabled(!filtriraneUlice.isEmpty());
    }
}


    public void ucitajZaposlene() throws Exception {
        this.reloadGrid();
        DefaultTableModel modelNalozi = (DefaultTableModel) tblZaposleni.getModel();

        zaposleniOsnovno = Controller.getInstance().loadSveZaposleneOSnovno();

        for (ZaposleniOsnovno z : zaposleniOsnovno) {
            modelNalozi.addRow(new Object[]{z.getId_zaposlenog(), z.getIme(), z.getPrezime()});
        }
    }

    private ZaposleniPogled jeIzabranZaposleni() {
        int zaposleniID = 0;
        int izabraniZaposleniIndex = tblZaposleni.getSelectedRow();
        if (izabraniZaposleniIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblZaposleni.getModel();
            Object izabraniID = model.getValueAt(izabraniZaposleniIndex, 0);

            zaposleniID = (Integer) izabraniID;
        }
        ZaposleniPogled z = new ZaposleniPogled();
        z.setId_zaposlenog(zaposleniID);
        return z;
    }
    
      private void setUpTableListener() {
        tblZaposleni.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    try {
                        ZaposleniPogled izabraniZaposleni = jeIzabranZaposleni();
                        pronadjenIzabraniZaposleni = Controller.getInstance().searchZaposleni("ID_ZAPOSLENOG='" + String.valueOf(izabraniZaposleni.getId_zaposlenog()) + "'");

                        if (pronadjenIzabraniZaposleni != null && !pronadjenIzabraniZaposleni.isEmpty()) {
                            izabraniZaposleni = pronadjenIzabraniZaposleni.get(0);
                        }
                        popuniFormuIzabranimZaposlenim(izabraniZaposleni);
                    } catch (Exception ex) {
                        Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        );
    }
      
       private void popuniFormuIzabranimZaposlenim(ZaposleniPogled zp) throws Exception {
        if (zp != null) {
            txtIDZaposlenog.setText(String.valueOf(zp.getId_zaposlenog()));
            txtIme.setText(String.valueOf(zp.getIme()));
            txtPrezime.setText(String.valueOf(zp.getPrezime()));
            txtKontakt.setText(String.valueOf(zp.getKontakt()));


            pronadjeneUlice = Controller.getInstance().searchUlice("POSTANSKI_BR='" + String.valueOf(zp.getPostanski_br()) + "' AND ID_ULICE='" + String.valueOf(zp.getId_ulice()) + "'");
            cmbPostanskiBr.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getPostanski_br()));
            cmbUlica.setEnabled(true);
            cmbUlica.setSelectedItem(String.valueOf(pronadjeneUlice.get(0).getNaziv()));

            pronadjeneFilijale = Controller.getInstance().searchFilijale("ID_FILIJALE='" + String.valueOf(zp.getId_filijale()) + "'");
            cmbFilijala.setSelectedItem(pronadjeneFilijale.get(0).getNaziv());

        }
    }
       
        private ZaposleniPogled preuzmiPodatkeZaZaposlenog() throws Exception {
        int zaposleniID = Integer.parseInt(txtIDZaposlenog.getText());
        String ime = txtIme.getText();
        String prezime = txtPrezime.getText();
        String kontakt = txtKontakt.getText();

        String nazivFilijale = cmbFilijala.getSelectedItem().toString();
    pronadjeneFilijale = Controller.getInstance().searchFilijale("NAZIV='" + nazivFilijale + "'");

    if (pronadjeneFilijale.isEmpty()) {
    throw new Exception("Filijala nije pronađena.");
    }

    Filijala izabranaFilijala = pronadjeneFilijale.get(0);
    int filijalaID = izabranaFilijala.getId_filijale();



        Object izabraniPostanskiBr = cmbPostanskiBr.getSelectedItem();
        int postanskiBr = Integer.parseInt(izabraniPostanskiBr.toString());
        
        Object izabranaUlica = cmbUlica.getSelectedItem();
        pronadjeneUlice = Controller.getInstance().searchUlice("NAZIV='" + izabranaUlica.toString() + "'");
        int ulicaID = pronadjeneUlice.get(0).getId_ulice();

        
        ZaposleniPogled zp = new ZaposleniPogled(zaposleniID, ime, prezime, kontakt, postanskiBr, ulicaID, filijalaID);

        return zp;
    }
    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
         try {
            ZaposleniPogled zaposleni = preuzmiPodatkeZaZaposlenog();

            Controller.getInstance().insertZaposleniPogled(zaposleni);

            ucitajZaposlene();
        } catch (Exception ex) {
            Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
         try {
            ZaposleniPogled zp = preuzmiPodatkeZaZaposlenog();

            Controller.getInstance().updateZaposleni(zp);

            ucitajZaposlene();
        } catch (Exception ex) {
            Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        try {
            ZaposleniPogled zp = jeIzabranZaposleni();

            Controller.getInstance().deleteZaposleniPogled(zp);

            ucitajZaposlene();
        } catch (Exception ex) {
            Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZaposleniForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZaposleniForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZaposleniForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZaposleniForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ZaposleniForm().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(ZaposleniForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<String> cmbFilijala;
    private javax.swing.JComboBox<String> cmbPostanskiBr;
    private javax.swing.JComboBox<String> cmbUlica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblZaposleni;
    private javax.swing.JTextField txtIDZaposlenog;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtKontakt;
    private javax.swing.JTextField txtPrezime;
    // End of variables declaration//GEN-END:variables
}
